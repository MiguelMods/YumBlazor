<div class="modal fade" id="bsConfirmationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">@Title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (ChildContent is not null)
                {
                    @ChildContent
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ConfirmClicked(false)" disabled="@IsProcessing">Close</button>
                <button type="button" class="btn btn-primary" @onclick="() => ConfirmClicked(true)" disabled="@IsProcessing">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code{
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public bool IsProcessing { get; set; }
    [Parameter]
    public EventCallback<bool> OnModalConfirmation { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; } = null;
    private async Task ConfirmClicked(bool value) 
        => await OnModalConfirmation.InvokeAsync(value);     
}