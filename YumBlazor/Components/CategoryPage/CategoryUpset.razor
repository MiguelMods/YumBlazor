@page "/category/create"
@page "/category/update/{Id:long}"
@using YumBlazor.Data.Entitys
@inject NavigationManager NavigationManager

<PageTitle>Category - @Title</PageTitle>

<h3>@Title</h3>
<hr />

@if (IsProcessing)
{
    <ProcessingAlertComponent />
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-4">
                    <EditForm Model="Model" FormName="CategoryUpsetForm" OnValidSubmit="FormValidation">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="border p-3 mt-4">
                            <div class="form-floating py-3 col-12">
                                <InputText @bind-Value="Model.Name" class="form-control" id="Name" placeholder="Name" disabled="@IsSavingForm" />
                                <label for="Name">Name</label>
                                <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
                            </div>
                            <div class="row mt-3">
                                <div class="col-6 col-md-3">
                                    <button type="submit" class="btn btn-primary form-control" disabled="@IsSavingForm">
                                        <i class="bi bi-save"></i> Save
                                    </button>
                                </div>
                                <div class="col-6 col-md-3">
                                    <button type="button" class="btn btn-danger form-control" disabled="@IsSavingForm" @onclick="GoBackToIndex">
                                        <i class="bi bi-arrow-bar-left"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
                @if (IsSavingForm)
                {
                    <ProcessingAlertComponent CssClass="alert alert-info" Message="@Message" />
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public long? Id { get; set; } = null;
    private string Title { get; set; } = "Create - New Category";
    private bool IsProcessing { get; set; } = false;
    private bool IsSavingForm { get; set; } = false;
    private string Message { get; set; } = string.Empty;

    [SupplyParameterFromForm]
    private Category Model { get; set; } = new();

    private ICategoryRepository? Repository;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Repository = CategoryRepository;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRun.ToastrWarning("Loading Category Page...");
            await Task.Delay(1000);

            if (Id.HasValue)
            {
                await JSRun.ToastrInfo($"Loading Category with Id {Id}...");
                Model = await Repository.GetByIdAsync(Id.GetValueOrDefault()) ?? new();

                if (Model == null || Model.Id == 0)
                {
                    var messages = $"Category with Id {Id} not found.";
                    NavigationManager.NavigateTo($"/category/{messages}");
                    return;
                }

                Title = $"Update - {Model?.Name} Category";
            }

            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task FormValidation()
    {
        IsSavingForm = true;
        bool success = false;
        Category? result;

        if (Model.Id > 0)
        {
            Message = $"Updating Category with Id {Model.Id} - {Model.Name}";
            await JSRun.ToastrInfo(Message);
            await Task.Delay(1000);
            result = await Repository.UpdateAsync(Model);
        }
        else
        {
            Message = $"Creating a new Category - {Model.Name}";
            await JSRun.ToastrInfo(Message);
            await Task.Delay(1000);
            result = await Repository.AddAsync(Model);
        }

        Model = result ?? new Category();
        success = Model.Id > 0;
        Message += success ? $", was successfully" : " was a error";

        if (success)
        {
            await JSRun.ToastrSuccess(Message);
        } else
        {
            await JSRun.ToastrError(Message);
        }

        await Task.Delay(1000);

        NavigationManager.NavigateTo($"/category");
    }

    private void GoBackToIndex()
    {
        NavigationManager.NavigateTo("/category");
    }
}
