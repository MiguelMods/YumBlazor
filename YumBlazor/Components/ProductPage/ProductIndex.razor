@page "/Product"
@inject IWebHostEnvironment Environment
@using YumBlazor.Data.Entities

@if (IsProcessing)
{
    <LoadingComponent />
}
else
{
    <div class="card shadow border-1 border-light mt-4 border-radius-15">
        <div class="card-header bg-primary bg-gradient m-lg-0 py-1 bg-opacity-75 text-center border-radius-15" style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif">
            <div class="row">
                <div class="col-12">
                    <h2 class="text-white py-1">Product List</h2>
                </div>
            </div>
        </div>
        <div class="card-body py-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="/Product/create" class="btn btn-lg btn-secondary w-25"><i class="bi bi-plus-square"></i> Add a New Product</a>
                </div>
            </div>
            <div>
                <table class="table table-responsive table-bordered table-striped table-hover">
                    <thead>
                        <tr>
                            <th class="text-center">#</th>
                            <th class="text-center">Name</th>
                            <th class="text-center">Category</th>
                            <th colspan="2" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Categories != null && Categories.Count() > 0)
                        {
                            @foreach (var Product in Categories.OrderBy(x => x.Id))
                            {
                                <tr>
                                    <td class="text-center">@Product.Id</td>
                                    <td class="text-center">@Product.Name</td>
                                    <td class="text-center">@Product.Category.Name</td>
                                    <td class="text-center"><a href="/Product/update/@Product.Id" class="btn btn-primary" title="Edit a @Product.Name"><i class="bi bi-pencil-square"></i> Edit </a></td>
                                    <td class="text-center"><button type="button" class="btn btn-danger" title="Delete a @Product.Name" @onclick="() => ShowDeleteConfirmModal(Product.Id)"><i class="bi bi-x-square"></i> Delete </button></td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center">No categories found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <BsModalComponent IsProcessing="@IsProcessingDelete" Title="Product Modal" OnModalConfirmation="OnModalConfirmation">
        <div>
            <p>Are you sure, to delete this Product?</p>
        </div>
    </BsModalComponent>
}

@code {

    public bool IsProcessing { get; set; } = false;
    public bool IsProcessingDelete { get; set; } = false;
    public long DeleteId { get; set; }
    private IEnumerable<Product> Categories { get; set; } = null!;
    private IProductRepository Repository { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Repository = ProductRepository;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRun.ToastrWarning("Loading Data...............");
            Categories = await Repository.GetAllAsync();
            await Task.Delay(1000);
            IsProcessing = false;
            StateHasChanged();
            await JSRun.ToastrSuccess("Page Loaded Successfully");
        }
    }

    private async Task ShowDeleteConfirmModal(long id)
    {
        DeleteId = id;
        await JSRun.ShowModal("bsConfirmationModal");
    }
    private async Task OnModalConfirmation(bool confirmed)
    {
        IsProcessingDelete = true;
        if (confirmed)
        {
            await Task.Delay(2000);
            await JSRun.ToastrInfo("Deleting a Product");

            var model = await Repository.GetByIdAsync(DeleteId);
            var imageFilePath = Path.Combine(Environment.WebRootPath, model.ImageUrl?.Trim('/'));

            if (File.Exists(imageFilePath))
            {
                File.Delete(imageFilePath);
            }

            var result = await Repository.DeleteAsync(DeleteId);

            if (!result)
            {
                await JSRun.ToastrError("Error, entity not deleted");
                return;
            }
        }
        else
        {
            await JSRun.ToastrWarning("Cancelled Deletion of a Product");
        }
        DeleteId = 0;
        await Task.Delay(2000);
        await JSRun.ToastrSuccess("Re-loading data");
        Categories = await Repository.GetAllAsync();
        await JSRun.HideModal("bsConfirmationModal");
        IsProcessingDelete = false;
    }
}
